#!/usr/bin/env ruby
# Copyright (c) 2010 Jeff Lindsay
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

require 'rubygems'
require 'optparse'
require 'mogotest'

api_host = "mogotest.com"
tunnel_host = "open.mogotunnel.com:8888"
public_ssh_key = nil

options = OptionParser.new do |o|
  o.banner = "Usage: mogotest [options] <mogotest_api_key> <hostname_to_test> <local_port>"

  o.on("-k", "--key FILE", "upload a public key for authentication") do |k|
    public_ssh_key = File.exist?(k.to_s) ? File.open(k).read : nil
  end

  o.on("--tunnel_host HOST", "connect to the named tunnel host (advanced debug mode)") do |t|
    tunnel_host = t
  end

  o.on("--api_host HOST", "connect to the named API host for registration (advanced debug mode)") do |a|
    api_host = a
  end

  o.on('-h', "--help", "show this help") { puts o; exit }
end

args = options.parse!
api_key = args[0]
test_host = args[1]
local_port = args[2]
unless api_key && test_host && local_port
  puts options
  exit
end

x = LocalTunnel::Tunnel.new(tunnel_host, local_port, public_ssh_key)
response = x.register_tunnel

m = Mogotest::Tunnel.new(api_host, api_key, test_host, response['host'])
m.notify_mogotest_of_tunnel

x.start_tunnel(m)

# start_tunnel blocks until the user sends an interrupt.  At that point, execution will resume here.
m.teardown_tunnel_in_mogotest